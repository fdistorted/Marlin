# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the 2.0.x branch
  push:
    branches: [ 2.0.x ]
#   pull_request:
#     branches: [ 2.0.x ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Run PlatformIO
        run: |
          pio run          
          cd .pio/build && zip  ../../firmware.zip ./**/*.hex
#          # export FIRMWARE_PATH=`find .pio/build/ -name "firmware.hex"`
#          # echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}${{ github.sha }}
          release_name: Release ${{ github.ref }}${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: firmware.zip
          asset_name: firmware.zip
          asset_content_type: application/zip
#       - name: Upload build
#         uses: actions/upload-artifact@master
#         with:
#           name: firmware
#           path: .pio/build/**/*.hex
#       - name: Remove old artifacts
#         uses: c-hive/gha-remove-artifacts@v1
#         with:
#           age: '1 week'
#           # Optional inputs
#           # skip-tags: true
#           skip-recent: 2
